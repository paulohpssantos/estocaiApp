name: CI/CD Spring Boot to AWS EC2

on:
  push:
    branches: [ "main" ] # dispara o deploy quando há push na branch main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
	env:
      JWT_SECRET_KEY: ${{ vars.JWT_SECRET_KEY }}

    steps:
      # 1 Faz o checkout do código-fonte
      - name: Checkout code
        uses: actions/checkout@v4

      # 2 Configura o Java 17
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3 Compila o projeto e gera o .jar
      - name: Build with Maven
        run: mvn clean package -DskipTests
        working-directory: estocai-api

      # Passo extra de debug — mostra o que tem dentro da pasta target
      - name: Show target folder
        run: ls -l estocai-api/target

      # 4 Copia o .jar para a instância EC2 via SSH
      - name: Copy jar to EC2
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "estocai-api/target/*.jar"
          target: "/home/ec2-user/app"
          strip_components: 2

      # 5 Reinicia a aplicação no servidor
      - name: Restart Spring Boot App on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Limpando instâncias antigas..."
            sudo fuser -k 8080/tcp || true

            echo "Iniciando nova versão..."
            cd /home/ec2-user/app

            export DB_URL=${{ secrets.DB_URL }}
            export DB_USERNAME=${{ secrets.DB_USERNAME }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}

            nohup java -jar *.jar > app.log 2>&1 &
            echo "Aplicação reiniciada com sucesso!"
